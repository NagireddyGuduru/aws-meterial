What is infrastructure as code (IAC)?
-- Provisioning Infrastructure via code.
Benefits of following IAC
 - Recreating Infrastructure is easy and quick
 - we put the code in SCM (Source code Management) tools like Git,SVN etc... This gives ability
     - Review changes before pushing to live
	 - SCM maintains all the version of our code.we can quickly troubleshoots issues and even roll back if something worg with
	   new release.
Tools for implementing IAC
  - Terraform(From Hashcorp)
      - Terraform is from HashiCorp and it hase opensource and enterprise versions.
      - Terraform is more dynamic 
      - Syntaxes are easy and simple, and no special language to learn.
      - It also allows you to define your code/templates more modular and reusable.
	  - Terraform supports multiple cloud providers like,AWS,Azure,GCP,Digital Ocean,Vmware etc.
	  
  - AWS cloud formation
     - This is a service from AWS and it works only for Aws.
     - It uses JSON/YAML for writing your templates.
	 - It is not as dynamic as Terraform eg: to create 10 subnets in this case 10 times as to write.in case terraform, we loop it.
	 
  - Ansible,Chef,Puppet,Python,Java - For IAC not good idea to choose. it has some side effects.these are good for configuration mgmt.	 
Provision & manage the servers using description language like
-- Aws cloudformation -- only for aws
-- terraform

Installing and Configuring Terraform:
*************************************
1) goto https://www.terraform.io/
2) download terraform for windows and unzip it. zip contains one single binary file.its not installer(you canot double click)
3) set the path
4) verify terraform --version
5) access

Anything can do manually can be automated using terraform

Download and Install Terraform

We need to set aws  permissions to the terraform to access account into our account.
--- this is separate account dedicated for  terraform.

Ways to Create 
-- create user in IAM with programmatic access and configure secret key and access where we are in terraform.
-- create the user with administrator access.
-- attach a role if you run terraform from ec2
-- you can export access key and scecret key as environment variable.
-- you can pass them as a variables to terraform command at run time.
-- tempory keys - tokens

Terraform Editor:
- Atom Editor
  goto https://atom.io/
  - install atom
  - after have to install copule of packages related to terraform.
  -CTRL+SHIFT P - choose install package and theme- Install - search language-terraform -- choose linter-terraform-sysntax,terraform-fmt-formate
  
  format setting:
  check Format on save.
  
  

Configuring Access key and Secret Key for Terraform
We have multiple ways to do this
Use AWS CLI
                Cmd : Aws configure
                Provide the access key and secret key
       2) Directly Provide secrete key and access key in terraform itself.
       3) We need to export credentials and region i.e Environment variables.
                



Terraform repo

https://github.com/javahometech/terraform-examples

Task:
Create 2 security groups
Create load balancer


Steps 1: Download Terraform

https://www.terraform.io/downloads.html

Select windows 64-bit

Step 2: Set the path

E:\DEVOPS\DEVOPS_SOFTWARES\terraform

Step 3: Create the User in AWS
 
Give the programmatic access
Managed Policy: AdministratorAccess 

Save keys:
Access Key ID:
AKIAJRDLHMPGJWQUGKRQ
Secret key:
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


Step 4:
file formate
.tf-main file
.tfvars-key files

plan
Apply

Step 5: Lanuch the ec2 instance using terraform


Required 
Machine img id: ami-6df1e514
Access Key ID:
AKIAJRDLHMPGJWQUGKRQ
Secret key:
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
Region:Oregon


Commands:
---------------
terraform plan
terraform apply
terraform show
terraform destroy

Terraform variables

-- It is not a good practice always hardcode values directly inside terraform resources it is better
    to user variables.


Variable “cloudops_vpc_cidr” {
    default = 172.10.1.0/16
}

Examples:

Tasks:

Create a VPC

Create a Internet gateway and attach to VPC.

Create a subnet in VPC

Create a route table and route to internet g/w. Attach this route table to public subnet.



git remote add origin https://github.com/NagireddyGuduru/terraform.git
git push -u origin master

Google:

Packer tool - create aws ami
























