Python Scripting and Boto3
**************************
Boto3:It is python module for amazon web services.

Python Scripting:
*****************

1.Popular scripting language today

2.It’s used for many use cases like

  a.for scripting devops, cloud computing, linux admin, networking etc etc..

  b.Used for development also
       i. we can create web based application as well
       ii.Big data - analytics

  c. Data science

  d. AI – Artificial Intelligence

  e. MI – Machine Learning

  f. Python every where

3. It’s open source

Python Features:
****************

1. It’s simple to use and learn

2. It targets precise syntaxes , shorthand syntaxes

Installing python3 in windows:
****************************
google => python

While installing , make sure you select the add the path for python.

Install PYCHAM:
***************
Google => Download pycham => Community

open Python terminal (windows command prompt)

>>> print('welcome to pythpn')

welcome to pythpn

>>> 

 

Adding two numbers

1.       Python is dynamically typed language, we should not define data type while defining variables.

2.       Python decides a runtime

3.       >>> a=10

4.       >>> type(a)

5.       <class 'int'>

 

>>> a=10

>>> b=20

>>> result = a+b

>>> print(result)

30

>>> 

>>> a=10

>>> b=20

>>> result = a+b

>>> print(result)

30

>>> result

30

>>> 

 

>>> del result

>>> print(result)

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>

NameError: name 'result' is not defined

>>> 

 

 
Python Input:

x= input('Enter x value')

y= input('Enter y value')

z = x+y

print('sum of {} and {} is {}'.format(x,y,z)) // format the string with certain values it will replace the values 

Type convertions:

x= input('Enter x value')
x= int(x)
y= input('Enter y value')
y= int(y)

z = x+y

print('sum of {} and {} is {}'.format(x,y,z)) // this more readable

Python Indentation:

- Python completly work on Indentation.


Data Types:

#Number
x=10
y=10.20

print(type(x))
print(type(y))
print(x+y)

#Boolean

x=True
y=False

print(type(x))

#string
name = 'Java Home'
location = "Banglore"
full_address = """
     NO 40,B Narayana pura,
	 Banglore
	 Karnataka
"""

Multiline comment

'''
This is your
'''

Function:
 
 name = 'python'
 
 print(name.upper())
 print(name.capitalize())
 print(name._len_())
 
 split:
 data ="Rakesh,25,Banglore"
 x= data.split(',') // here x have three value behind 
 #x = ["Rakesh",25,"Banglore"]
 print("Name is "+x[0]) //here doing concartination
 print("Age is"+x[1])
 print("Location is"+x[2])  
 
 
 Slice:
 ------
 To extract perticular potion.
 
 data = 'Unhappy'
 x = data[2:] # This returns happy(from index 2 till end of the string)
 print(x) 
 x = data[2:4] # ending index is exclusive , this returns ha (from index 2 till 4-1)
 
 x = data[::] # step 
 x= data[::2] # move to 2 steps
 x= data[:3:]
 # start at 0
 # Stop at end of the string
 # Move 2 steps at a time
 
 List:
 ----
 - it holds multiple values
 Eg:
   locations = ["Banglore","Noida","Mumbai","Pune","Banglore"]
   '''
     1. Allows duplicates
	 2. It maintains insertion order
	 3. You can Insert,update,delete values in List.(Mutable i.e modifiable)
	 4. 
   '''
# For loops 
for location in locations:    // : tells begining of the block
  print(x)   
for location in locations[::2]: // alternative values print
for location in locations[::-1]: // reverse print
for location in locations[::]:

# Accessing values at specific index
 print(location[3])
#Delete data 
 del location[3] // delete at specific index
#Appent adds to the end of the list
 locations.append('Hyderabad')
#Using Insert you could insert at any specifice index
 locations.insert(1,"Chennai") 
# Replaces old value at index 0 with new Values Delhi
 location[0] = 'Delhi'

print('Outside for loop')  // in python readability no that much good

Set:
----
   locations = {"Banglore","Noida","Mumbai","Pune","Banglore"}
   '''
     #### Set Data Type #####
     1. Set doesnot allows duplications
	 2. It does not maintains insertion order
	 3. It doesnot allow index based operations
	 
   '''
 print(locations)
 print(locations[0]) // not allow indexing
 locations.add('Chennai')

 for y in locations:
   print(y)

tuples:
-------   
   locations = ("A","B","C")
   '''
     #### Tuple Data Type #####
     1. Tuple allows duplicates
	 2. It maintains insertion order
	 3. Tuple is immutalbe (you can't update tuple)
	 4. It allow index based operation
   '''
 
 print(locations[0])
 for y in locations:
    print(y)

Dictionary:
----------
   - Dictionary  stores data as key value pair
country_codes= {"India:IN","Russia":"RS","South Africa":"RSA"}   
country_codes= {
    "India:IN",
	"Russia":"RS",
	"South Africa":"RSA"
	}   
# We get values from dictionary by passing keys
# Keys in dictionary must be unique 
# If you add duplicate key old key/values replaced with new key/values

# Get all keys
for key in country_codes.keys():
 print(key)
# Get all values
 for value in country_codes.values():
 print(value)

#Get key and its values
 for key in country_codes.keys():
    val = country_codes.get(key)
    print("key is {} and value is {}".format(key,val))

employee = {
 "Name": "RamKrishna"
 "Salary": 2000,
 "Skills":[
   'java','aws','python'
 ],
 "company": {
    "name": "IBM",
	"location":"Pune",
	"department":"HR"
 }
}

name = employe['Name']	
skills = employee['skills']
company = employee['company']
company_name = employee['company']['name']

for skill in employee['skills']:
 print(skill)

print('Name is {} '.format(employee['Name']))
---------------
----------------------------------
Functions:
---------
  # Defining Function in Python
  def add(x,y):
      result = x+y
	  print('Sum of {} and {} is {}'.format(x,y,result))
# Invoking a function
add(10,20)
add(30,40)
To Return:
----------
# Defining Function in Python
  def add(x,y)://here x y parameters
      result = x+y
	  print('Sum of {} and {} is {}'.format(x,y,result))
	  return result,result // In python can return mutiple returns
# Invoking a function
r=add(10,20) //here 10,20 are arguments
r1=add(30,40)
--------------------------------------
Exception Handling:
-------------------
- try:
   x= input('Enter value of x= ')
   y= input('Enter value of y= ')
   result =int(x)+int(y)
   print('Sum of {} and {} is {}'.format(x,y,result))
  except ValueError as e:
   print('Please enter only numbers',e)
  except KeyError:
   print('Please enter valid key') 
  finally:
    # finally block for closing the db connection,closing files
   print('Executes always')
   
 
Tasks:

print hello world

sum of 2 integers 

sum of 2 intergers with input parameters

print boolean values

write a script,take one string and use some functions

print strings with single line and multi line

write a script to splite the data

writa a script to extract perticular posion.

find max element in list

search for element in list

x = [10,1,2,8,9,3]
search_for = 2
for i in x:
 if i == search_for:
    print('Value {}',found in the list'.formate(search_for))
 else
    print('Value {}',not found in the list'.formate(search_for))

Here This code may not be efficient. can do more imporvements	
---------------------------	
for i in x:
 if i == search_for:
    found = True
	break // once found break loop
 
if found: // it is boolean not need compare if it is number have to compare if found == 2
   print('Value {}',found in the list'.formate(search_for))
else:
  print('Value {}',not found in the list'.formate(search_for))
-----------------------------
if search  200
  print('Value {}',found in the list'.formate(search_for))
else:
  print('Value {}',not found in the list'.formate(search_for))
-------------------------------\

courses = ["AWS","Java","Docker"]
if "Kubernets" in courses:
   print('Register for the course')
else:
   print('Do not register for the course')
-----------------------------------

courses = ["AWS","Java","Docker"]
if "Kubernets" not in courses:
   print('Register for the course')
else:
   print('Do not register for the course')
   
----------------------------------

x=0 // false
x=-12 or x= 2 // true
x="" // false
x="  " // true
any blank false
x={},x=[],x=""


in if condition along with boolean we can use diff data types while using numbers 0 is false anything else is true.
------------------------------------------

Nested If block
 marks = 90
 if marks >=60:
    print('First class')
 elif marks >=50:
    print('second class')
 elif marks >=35:
    print('Pass') 
 else:
    print("Failed") 
	
------------------------------------------
While loop:
-----------
count = 1

while count <= 10:
   print(count)	
   count = count + 1 // count++ not support in python
else:
   print('End') // we can use else block for while in python

-----------------------------------------------------

Continue:   
--------
 values = [1,2,3,4,6,0,3,0,1]   
 result = 1
 
 for x in values:
    if x == 0: 
	  continue # when zero, stop current iteration and continue with next interation
	result = result * x //this statement will not execute if it is continue. it goto next iteration i.e next iteration is 3.

print('Result is ',result)
--------------------------------------------------------
BOTO 3:
------
- boto 3 is python sdk of amazon
- We need to install explictly this
- For installing any modules we use pip
- latest python version come with pip no need to install explictly.

Installing Boto 3:
------------------
pip install boto3

In AWS:
- create IAM user with admin permissions and select programmatic access.
- Using cli configure access key and secrete key
- .aws/config key location

verify:
  pip --version
-----------------------------------------------------------------------------------------------------------------------
  #Launching Ec2 using boto3
  import boto3
  client=boto3.client('ec2',region='ap-south-1')
  client.run_instances(
     ImageId= '',
	 InstanceType = 't2.micro',
	(mandatroy) MaxCount=1,
	 (mandatory)MinCount=1
  )
 eg: Maxcount 20, subnet capacity 10 then it will create 10 instances
     Mincount 15, subnet capacity 10 in this case, will not create the instance bcoz minimum capacity not there.
-------------------------------------------------------------------------------------------------------------------
 #List all ec2 instances
 import boto3
 client=boto3.client('ec2',region='ap-south-1')
 resp = client.describe_instances()
 print(resp)
 
 -------------------------------------------------------------------------------------------------------------------
 Tasks:

1) Launching Ec2 using boto3
2) List all ec2 instances
  

  




















